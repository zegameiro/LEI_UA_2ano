# Generated from xAdv.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,150,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,74,
        8,5,1,6,4,6,77,8,6,11,6,12,6,78,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,4,8,92,8,8,11,8,12,8,93,1,8,1,8,1,8,1,8,3,8,100,8,8,
        1,9,1,9,5,9,104,8,9,10,9,12,9,107,9,9,1,10,1,10,5,10,111,8,10,10,
        10,12,10,114,9,10,1,11,3,11,117,8,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,5,12,126,8,12,10,12,12,12,129,9,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,5,13,139,8,13,10,13,12,13,142,9,13,1,13,1,13,1,
        13,1,13,1,13,1,14,1,14,2,127,140,0,15,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,1,0,6,2,0,9,9,32,
        32,1,0,49,57,1,0,48,57,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,
        0,47,47,160,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,1,31,1,0,0,0,3,38,1,0,0,0,5,48,1,0,0,0,7,50,1,0,0,0,9,52,
        1,0,0,0,11,73,1,0,0,0,13,76,1,0,0,0,15,82,1,0,0,0,17,99,1,0,0,0,
        19,101,1,0,0,0,21,108,1,0,0,0,23,116,1,0,0,0,25,122,1,0,0,0,27,134,
        1,0,0,0,29,148,1,0,0,0,31,32,5,100,0,0,32,33,5,101,0,0,33,34,5,102,
        0,0,34,35,5,105,0,0,35,36,5,110,0,0,36,37,5,101,0,0,37,2,1,0,0,0,
        38,39,5,97,0,0,39,40,5,117,0,0,40,41,5,116,0,0,41,42,5,111,0,0,42,
        43,5,109,0,0,43,44,5,97,0,0,44,45,5,116,0,0,45,46,5,111,0,0,46,47,
        5,110,0,0,47,4,1,0,0,0,48,49,5,123,0,0,49,6,1,0,0,0,50,51,5,58,0,
        0,51,8,1,0,0,0,52,53,5,125,0,0,53,10,1,0,0,0,54,55,5,108,0,0,55,
        56,5,105,0,0,56,57,5,110,0,0,57,58,5,101,0,0,58,59,5,99,0,0,59,60,
        5,111,0,0,60,61,5,108,0,0,61,62,5,111,0,0,62,74,5,114,0,0,63,64,
        5,99,0,0,64,65,5,111,0,0,65,66,5,108,0,0,66,67,5,111,0,0,67,74,5,
        114,0,0,68,69,5,108,0,0,69,70,5,97,0,0,70,71,5,98,0,0,71,72,5,101,
        0,0,72,74,5,108,0,0,73,54,1,0,0,0,73,63,1,0,0,0,73,68,1,0,0,0,74,
        12,1,0,0,0,75,77,7,0,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,
        0,78,79,1,0,0,0,79,80,1,0,0,0,80,81,6,6,0,0,81,14,1,0,0,0,82,83,
        5,59,0,0,83,84,1,0,0,0,84,85,6,7,0,0,85,16,1,0,0,0,86,87,5,34,0,
        0,87,91,3,21,10,0,88,89,3,13,6,0,89,90,3,21,10,0,90,92,1,0,0,0,91,
        88,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,95,1,0,0,
        0,95,96,5,34,0,0,96,100,1,0,0,0,97,100,3,21,10,0,98,100,3,19,9,0,
        99,86,1,0,0,0,99,97,1,0,0,0,99,98,1,0,0,0,100,18,1,0,0,0,101,105,
        7,1,0,0,102,104,7,2,0,0,103,102,1,0,0,0,104,107,1,0,0,0,105,103,
        1,0,0,0,105,106,1,0,0,0,106,20,1,0,0,0,107,105,1,0,0,0,108,112,7,
        3,0,0,109,111,7,4,0,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,
        0,0,0,112,113,1,0,0,0,113,22,1,0,0,0,114,112,1,0,0,0,115,117,5,13,
        0,0,116,115,1,0,0,0,116,117,1,0,0,0,117,118,1,0,0,0,118,119,5,10,
        0,0,119,120,1,0,0,0,120,121,6,11,0,0,121,24,1,0,0,0,122,123,7,5,
        0,0,123,127,7,5,0,0,124,126,9,0,0,0,125,124,1,0,0,0,126,129,1,0,
        0,0,127,128,1,0,0,0,127,125,1,0,0,0,128,130,1,0,0,0,129,127,1,0,
        0,0,130,131,3,23,11,0,131,132,1,0,0,0,132,133,6,12,0,0,133,26,1,
        0,0,0,134,135,5,47,0,0,135,136,5,42,0,0,136,140,1,0,0,0,137,139,
        9,0,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,141,1,0,0,0,140,138,
        1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,144,5,42,0,0,144,145,
        5,47,0,0,145,146,1,0,0,0,146,147,6,13,0,0,147,28,1,0,0,0,148,149,
        9,0,0,0,149,30,1,0,0,0,10,0,73,78,93,99,105,112,116,127,140,1,6,
        0,0
    ]

class xAdvLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    AutomatonProperty = 6
    WS = 7
    Ignore = 8
    Value = 9
    INT = 10
    ID = 11
    NEWLINE = 12
    SingleLineComment = 13
    BlockComment = 14
    ERROR = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'define'", "'automaton'", "'{'", "':'", "'}'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "AutomatonProperty", "WS", "Ignore", "Value", "INT", "ID", "NEWLINE", 
            "SingleLineComment", "BlockComment", "ERROR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "AutomatonProperty", 
                  "WS", "Ignore", "Value", "INT", "ID", "NEWLINE", "SingleLineComment", 
                  "BlockComment", "ERROR" ]

    grammarFileName = "xAdv.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


